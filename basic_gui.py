# -*- coding: utf-8 -*-
"""
Created on Thu Sep 29 00:09:39 2022

@author: Himanshu Tyagi
"""
# Form implementation generated from reading ui file 'sign_up.ui'
# Created by: PyQt5 UI code generator 5.15.7
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from astropy import log
from astropy.coordinates import Angle, SkyCoord
from astropy.visualization import AsymmetricPercentileInterval
from regions import RectangleSkyRegion
from astropy.wcs import WCS
from astropy.io import fits
import matplotlib.pyplot as plt
from astroquery.skyview import SkyView
import astropy.units as u
from astropy.nddata import Cutout2D
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import sys
from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayout, QHeaderView
from PyQt5.QtCore import pyqtSignal, pyqtSlot, QObject, QThread, QTimer
from matplotlib.backends.backend_qt5agg import FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT
from matplotlib.figure import Figure
from matplotlib.colors import LogNorm
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as Navi
import sip
import pandas as pd
from astropy.visualization.interval import (PercentileInterval,
                                            AsymmetricPercentileInterval,
                                            ManualInterval, MinMaxInterval)

from astropy.visualization.stretch import (LinearStretch, SqrtStretch,
                                           PowerStretch, LogStretch,
                                           AsinhStretch)

from astropy.visualization.mpl_normalize import ImageNormalize


import threading

y = 70


class MatplotlibCanvas(FigureCanvasQTAgg):
	def __init__(self,parent=None, dpi = 120):
		self.fig = Figure(figsize=[10,10], dpi = dpi)
		#self.axes = fig.add_subplot(111)

		super(MatplotlibCanvas,self).__init__(self.fig)
		#self.fig.set_positions(0.2, 0.2, 0.8, 0.8) # left,bottom,width,height
        #fig.tight_layout()
     




def simple_norm(data, stretch='linear', power=1.0, asinh_a=0.1, log_a=1000,
                min_cut=None, max_cut=None, min_percent=None, max_percent=None,
                percent=None, clip=True):

    if percent is not None:
        interval = PercentileInterval(percent)
    elif min_percent is not None or max_percent is not None:
        interval = AsymmetricPercentileInterval(min_percent or 0.,
                                                max_percent or 100.)
    elif min_cut is not None or max_cut is not None:
        interval = ManualInterval(min_cut, max_cut)
    else:
        interval = MinMaxInterval()

    if stretch == 'linear':
        stretch = LinearStretch()
    elif stretch == 'sqrt':
        stretch = SqrtStretch()
    elif stretch == 'power':
        stretch = PowerStretch(power)
    elif stretch == 'log':
        stretch = LogStretch(log_a)
    elif stretch == 'asinh':
        stretch = AsinhStretch(asinh_a)
    else:
        raise ValueError('Unknown stretch: {0}.'.format(stretch))

    vmin, vmax = interval.get_limits(data)

    return ImageNormalize(vmin=vmin, vmax=vmax, stretch=stretch, clip=clip)

        
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
     
        MainWindow.resize(1480, 900)
        MainWindow.setFocusPolicy(QtCore.Qt.TabFocus)
        MainWindow.setStyleSheet("\n"
"\n"
"background-color: rgb(255,255,255);\n"
"font: 14pt \"Times\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        """
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(280, 300, 106, 30))
        self.pushButton.setObjectName("pushButton")
        """ 
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(120, y+70*0, 131, 31))
        self.label.setObjectName("label")
        
        self.textEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(280, y+ 0*70, 371, 41))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setToolTip("Enter simbad searchable name")
        
        
        self.coords_label = QtWidgets.QLabel(self.centralwidget)
        self.coords_label.setGeometry(QtCore.QRect(120, y+70*1, 131, 31))
        self.coords_label.setObjectName("coords_label")
        
        
        self.coords = QtWidgets.QLineEdit(self.centralwidget)
        self.coords.setGeometry(QtCore.QRect(280, y+70*1, 371, 41))
        self.coords.setObjectName("coords")
        self.coords.setToolTip("Enter Coordinates (Optional, if Object name is given.)")
        
        
        self.label_filename = QtWidgets.QLabel(self.centralwidget)
        self.label_filename.setGeometry(QtCore.QRect(120, y+70*2, 131, 31))
        self.label_filename.setObjectName("label")
        
        self.textEdit_filename = QtWidgets.QLineEdit(self.centralwidget)
        self.textEdit_filename.setGeometry(QtCore.QRect(280, y+70*2, 250, 41))
        self.textEdit_filename.setObjectName("textEdit_filename")
        self.textEdit_filename.setToolTip("Optional (overrides Target Name)")

        self.file_upload = QtWidgets.QPushButton(self.centralwidget)
        self.file_upload.setGeometry(QtCore.QRect(531, y+70*2, 120, 41))
        self.file_upload.setIcon( QtGui.QIcon("upload2.png"))
        self.file_upload.setObjectName("file_upload")
        self.file_upload.setToolTip("Upload a .fits file")
        
        
        self.target_list_fname = QtWidgets.QLabel(self.centralwidget)
        self.target_list_fname.setGeometry(QtCore.QRect(120, y+70*3, 131, 31))
        self.target_list_fname.setObjectName("target_list_fname")
        
        self.target_list = QtWidgets.QLineEdit(self.centralwidget)
        self.target_list.setGeometry(QtCore.QRect(280, y+70*3, 250, 41))
        self.target_list.setObjectName("target_list")
        self.target_list.setToolTip("Displays Targets in FOV (optional)")
        
        self.load_targets = QtWidgets.QPushButton(self.centralwidget)
        self.load_targets.setGeometry(QtCore.QRect(531, y+70*3, 120, 41))
        self.load_targets.setIcon( QtGui.QIcon("csv.png"))
        self.load_targets.setObjectName("load_targets")
        self.load_targets.setToolTip("Load target list")  
        

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(120, y+70*4, 180, 120))
        self.label_2.setObjectName("label_2")

        
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(377, y+70*4, 275, 225))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.verticalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)



        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(377, y+70*8, 275, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setToolTip("Plot slit configuration over sky image")
        
      
                

        self.label_Temp = QtWidgets.QLabel(self.centralwidget)
        self.label_Temp.setGeometry(QtCore.QRect(120, y+70*9, 131, 31))
        self.label_Temp.setObjectName("Temperature")
        
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(300, y+70*9, 161, 61))
        self.lcdNumber.setFocusPolicy(QtCore.Qt.NoFocus)
        self.lcdNumber.setStyleSheet("color: rgb(255, 0, 0);")
        self.lcdNumber.setInputMethodHints(QtCore.Qt.ImhNoEditMenu)
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdNumber.setProperty("intValue", 0)
        self.lcdNumber.setObjectName("lcdNumber")
        
        
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(750,50,661,661))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.textEdit.raise_()
        self.label.raise_()
        self.coords_label.raise_()
        self.label_filename.raise_()
        self.label_2.raise_()
        
        
        self.target_list_fname.raise_()
        self.coords.raise_()
        self.label_Temp.raise_()
        self.lcdNumber.raise_()
        self.tableWidget.raise_()
        self.pushButton_5.raise_()
#        self.target_list.rasie()
        self.load_targets.raise_()
        self.gridLayoutWidget.raise_()
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        

        self.gridLayout.setObjectName("gridLayout")        
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.spacerItem = QtWidgets.QSpacerItem(40, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(self.spacerItem)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        
        
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.spacerItem1 = QtWidgets.QSpacerItem(40, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(self.spacerItem1)
        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 1, 1)

        
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.canv = MatplotlibCanvas(self)
        self.toolbar = Navi(self.canv,self.centralwidget)
        self.horizontalLayout.addWidget(self.toolbar)
        
        self.pushButton_5.clicked.connect(self.plot_table)
        self.file_upload.clicked.connect(self.open_file)    
        self.load_targets.clicked.connect(self.open_target)    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Target name</span></p></body></html>"))
        self.coords_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Coordinates</span></p></body></html>"))
        self.label_filename.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">File name</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Slit Configurations <br> (Enter in arcsec) </span></p></body></html>"))
        self.target_list_fname.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Target list</span></p></body></html>"))
        
        self.label_Temp.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:black;\">Temperature</span></p><p><br/></p></body></html>"))
        #self.pushButton_2.setText(_translate("MainWindow", "SUM"))
        #self.pushButton_3.setText(_translate("MainWindow", "Multiply"))
        #self.pushButton_4.setText(_translate("MainWindow", "Clear"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "0"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "2"))

        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "3"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "4"))
        
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Slit Width"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Offset"))
        self.pushButton_5.setText(_translate("MainWindow", "Load FOV"))



    def open_file(self):
            self.filename = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', '*.fits')
            print(self.filename[0])
            self.textEdit_filename.setText(self.filename[0])
        
    def open_target(self):
            self.filename = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', '*.csv')
            print(self.filename[0])
            self.target_list.setText(self.filename[0])

    def multiply(self):
        a = self.plainTextEdit_2.toPlainText()
        b = self.plainTextEdit_3.toPlainText()

        try:
            c = int(a)*int(b)
            self.lcdNumber.display(c)
        except:
            print("Invalid Inputs")
          
    #@pyqtSlot()
    def plot_table(self, vmin=None, vmid=None, vmax=None, pmin=0.25, pmax=99.75, 
                   stretch='linear', exponent=2):
        
            source_check = self.textEdit.text()
            coord_check = self.coords.text()
            if len(source_check)!=0:
                source = self.textEdit.text()                           
                coord = SkyCoord.from_name(source, frame = 'icrs')
                print('Coordinates of the requested objects are: ',coord.ra, coord.dec)
                
            else:
                coord_string = self.coords.text()
                coord = SkyCoord(coord_string, frame="icrs")
    
            file_name = self.textEdit_filename.text()
    
            if file_name[-5:]==".fits":
                hdu = fits.open(file_name)[0]
                wcs = WCS(hdu.header)
                
            elif file_name[-5:]==".fits" and len(source_check)==0:
                hdu = fits.open(file_name)[0]
                wcs = WCS(hdu.header)
                coord_string = self.coords.text()
                coord = SkyCoord(coord_string, frame="icrs")
                
            elif len(source_check)==0 and len(coord_check)!=0 and len(file_name)==0:
                paths = SkyView.get_images(position=coord, height=10*u.arcmin,  width=10*u.arcmin,
                                        survey=['2MASS-K'])
                hdu = paths[0][0]
                wcs = WCS(hdu.header)
                
            else:    
                paths = SkyView.get_images(position=source, height=10*u.arcmin,  width=10*u.arcmin,
                                        survey=['2MASS-K'])
                hdu = paths[0][0]
                wcs = WCS(hdu.header)
    
            size = u.Quantity((10, 10), u.arcmin)
            stamp = Cutout2D(hdu.data, coord, size, wcs=wcs)
            #fig, ax = plt.subplots( subplot_kw={'projection': stamp.wcs}, dpi = 300)
            projection = stamp.wcs

            try:
                self.horizontalLayout.removeWidget(self.toolbar)
                self.verticalLayout.removeWidget(self.canv)
                sip.delete(self.toolbar)
                sip.delete(self.canv)
                self.toolbar = None         
                self.canv = None
                self.verticalLayout.removeItem(self.spacerItem1)
                
            except Exception as e:
                print(e)
                pass
            #self.label_6.pixmap(QtGui.QPixmap(fg))
            self.canv = MatplotlibCanvas(self)
            self.toolbar = Navi(self.canv,self.centralwidget)
            self.horizontalLayout.addWidget(self.toolbar)
            self.verticalLayout.addWidget(self.canv)
            #self.canv.axes.cla()
            self.canv.fig
            
            
            ax = self.canv.fig.add_subplot(111, projection=stamp.wcs)
            
            min_auto = vmin is None
            max_auto = vmax is None
    

            if min_auto or max_auto:
    
                interval = AsymmetricPercentileInterval(pmin, pmax, n_samples=10000)
                
                try:
                    vmin_auto, vmax_auto = interval.get_limits(stamp.data)
                except (IndexError, TypeError):  # no valid values
                    vmin_auto = vmax_auto = 0
                    
                vmin = vmin_auto          
                vmax = vmax_auto    
           
                    
            # Prepare normalizer object
            if stretch == 'arcsinh':
                stretch = 'asinh'
    
            if stretch == 'log':
                if vmid is None:
                    if vmin < 0:
                        raise ValueError("When using a log stretch, if vmin < 0, then vmid has to be specified")
                    else:
                        vmid = 0.
                if vmin < vmid:
                    raise ValueError("When using a log stretch, vmin should be larger than vmid")
                log_a = (vmax - vmid) / (vmin - vmid)
                norm_kwargs = {'log_a': log_a}
            elif stretch == 'asinh':
                if vmid is None:
                    vmid = vmin - (vmax - vmin) / 30.
                asinh_a = (vmid - vmin) / (vmax - vmin)
                norm_kwargs = {'asinh_a': asinh_a}
            else:
                norm_kwargs = {}
    
            normalizer = simple_norm(stamp.data, stretch=stretch, power=exponent,
                                     min_cut=vmin, max_cut=vmax, clip=False,
                                     **norm_kwargs)
    
            # Adjust vmin/vmax if auto
            
            if stretch == 'linear':
                vmin = -0.1 * (vmax - vmin) + vmin
            #log.info("Auto-setting vmin to %10.3e" % vmin)
            if stretch == 'linear':
                vmax = 0.1 * (vmax - vmin) + vmax
            #log.info("Auto-setting vmax to %10.3e" % vmax)
    
            # Update normalizer object
            normalizer.vmin = vmin
            normalizer.vmax = vmax

            ax.imshow(stamp.data, origin='lower', 
                      cmap="gist_earth", norm=normalizer) 
            
            ## Slit configuration

            fov_width = 3.1*60 ## in arcsec
            delta_fov = 9.1*60 ## in arcsec
            coord_fov = SkyCoord(coord.ra+(0/3600)*u.deg, coord.dec+(0)*u.arcsec)                     
            sky_region = RectangleSkyRegion(coord_fov, width=fov_width *u.arcsec, height=9.1*u.arcmin)
            pixel_region = sky_region.to_pixel(stamp.wcs)
            artist = pixel_region.as_artist(color='gray', lw=1)            
            ax.add_artist(artist)         

            c = ['r', 'tab:orange', 'yellow', 'lime', 'pink']
            for i in range(5):
            
                slit0_width = float(self.tableWidget.item(0+i, 0).text())
                delta_x0 = float(self.tableWidget.item(0+i, 1).text())
                coord_slit0 = SkyCoord(coord.ra+(delta_x0/3600)*u.deg, coord.dec+9.1*(2-i)/5*u.arcmin)                     
                sky_region = RectangleSkyRegion(coord_slit0, width=slit0_width *u.arcsec, height=9.1/5*u.arcmin)
                pixel_region = sky_region.to_pixel(stamp.wcs)
                artist = pixel_region.as_artist(color=c[i], lw=1)            
                ax.add_artist(artist)
                ax.text(0.1, 0.9-i*0.05, f'Slit {i}', transform=ax.transAxes, c=c[i],  weight="bold")
            
            ax.plot_coord(coord)
            ax.set_xlabel('RA')
            ax.set_ylabel('Dec')
            ax.set_title("2MASS Image (band Ks)")            


            ax.scatter(coord.ra.value, coord.dec.value, transform=ax.get_transform('world'), marker='o', c='None', edgecolors='white', s=100)
            

            targetlist = self.target_list.text()

            if len(targetlist)!=0:
                    df = pd.read_csv(targetlist)
                    x, y = df['RA'], df['Dec']
                    ax.scatter(x,y, transform=ax.get_transform('world'), marker='o', c="None", edgecolors='w', s=100)


            else:
                    pass

            self.canv.draw()
            
        
        
        
    def worker(self):
        run_thread = threading.Thread(target = self.plot_table)
        run_thread.start()
        

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
